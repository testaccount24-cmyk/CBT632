TOBASE64 csect
TOBASE64 amode 31
TOBASE64 rmode 24

           #REGEQU

***********************************************************************
*                                                                     *
*   MODULE NAME:  TOBASE64 - ASCII to "safe ASCII" base 64 for MIME   *
*                                                                     *
***********************************************************************
*            Justice Information System - CONFIDENTIAL                *
*                                                                     *
*      (C) Attorney-Generals' Department of South Australia           *
*                                                                     *
*                  2000 LICENSED MATERIAL                             *
*                                                                     *
*    Property of Attorney-General's Department of South Australia     *
*                                                                     *
***********************************************************************
*                                                                     *
* AUTHOR:      G.Cherlet                                              *
*              Heron Computing Services                               *
* DATE:        October 2000                                           *
* COPYRIGHT:   Attorney-General's Department of South Australia       *
*                                                                     *
* DESCRIPTION: the purpose of this program is to read data from the   *
* the file pointed to by the SYSUT1 DD statement and, treating it as  *
* a continuous bit stream, encode it as a BASE64 data stream. The     *
* resultant encoded data is written to the file pointed to by the     *
* SYSUT2 DD statement.                                                *
*                                                                     *
* Register Usage:                                                     *
*                                                                     *
* R12 - Base                                                          *
* R11 - Link Register                                                 *
* R8  - Current output pointer in OUT_AREA                            *
* R6  - Current input pointer in IN_AREA                              *
* R5  - Used when doing "save+restore" of unprocessed characters      *
* R4  - Length of data left to encode                                 *
* R3  - Used when doing "save+restore" of unprocessed characters      *
* R2  - Base for SYSUT1 - for referencing DCB information             *
*                                                                     *
*                                                                     *
***********************************************************************

         using TOBASE64,R12
         SAVE  (14,12),,*                   SAVE REGISTERS
         lr    R12,R15
         lr    R11,R13
         st    R13,SAVEAREA+4
         la    R13,SAVEAREA
         #JISTAMP
         b     INITRTN
SAVEAREA dc    18F'0'
INITRTN  equ   *
         st    R13,8(R11)

         mvc   WTOMSG(26),=c'** Opening SYSUT1       **'
         bal   R11,WTOPRTN

         OPEN  (SYSUT1,(INPUT)),MODE=31
         la    R2,SYSUT1
         using IHADCB,R2

         mvc   WORD+2(2),DCBLRECL
         l     R15,WORD
         cvd   R15,DWORD
         oi    DWORD+7,x'0F'
         mvc   WTOMSG(26),=c'** input LRECL = 00000  **'
         unpk  WTOMSG+18(5),DWORD+5(3)
         bal   R11,WTOPRTN

         mvc   WTOMSG(26),=c'** RECFM = variable     **'
         tm    DCBRECFM,DCBRECV
         bo    FILE$OKF

         mvc   WTOMSG(26),=c'** RECFM = fixed        **'
         tm    DCBRECFM,DCBRECF
         bo    FILE$OKV

         mvc   WTOMSG(26),=c'** RECFM = unknown      **'
         bal   R11,WTOPRTN
         l     R15,=f'16'
         b     CLOSE1

FILE$OKV       equ   *

         clc   DCBLRECL,=h'1028'
         bnh   FILE$OK

         mvc   WTOMSG(26),=c'** LRECL more than 1028  **'
         bal   R11,WTOPRTN
         l     R15,=f'16'
         b     CLOSE1

FILE$OKF       equ   *

         clc   DCBLRECL,=h'1024'
         bnh   FILE$OK

         mvc   WTOMSG(26),=c'** LRECL more than 1024  **'
         bal   R11,WTOPRTN
         l     R15,=f'16'
         b     CLOSE1

FILE$OK        equ   *

         bal   R11,WTOPRTN

         OPEN  (SYSUT2,(OUTPUT)),MODE=31

         mvc   REMAINDER,=f'0'
         mvc   OUT_SIZE,=f'0'
         la    R8,OUT_AREA

         bal   r11,READ$RTN     After this: R6 = a(IN_AREA)
*                                           R4 = ACTUAL_LENGTH

ENCODE$LOOP    equ   *

         st    R4,REMAINDER      Save for future reference!
         ch    R4,=h'3'          Have we got at least 3 bytes?
         bnl   ENCODE$3          YES - encode them !
*                                NO - save them and READ next record!
         c     R4,=f'0'
         be    ENCODE$R

         bctr  R4,R0             Set machine length for move - then
         ex    R4,SAVEREMAINDER   do the move !
*                                Less than 3 bytes to encode - time to
ENCODE$R bal   R11,READ$RTN       read next record - if it's there
         a     R4,REMAINDER        calculate NEW actual_length - note
*                                   R4 = LENGTH READ after READ$RTN !

         clc   REMAINDER,=f'0'
         be    ENCODE$3

         la    R3,IN_AREA        Add "remainder" of last record
         l     R5,REMAINDER       to front of this record !

         tm    DCBRECFM,DCBRECF  Fixed or Variable?
         bo    ENCODE$V          Fixed - continue!
         ah    R3,=h'4'          Variable - bypass the RDW !

ENCODE$V equ   *

         sr    R3,R5             Calculate "to" location -
         bctr  R5,R0              and machine length -
         ex    R5,RESTORECHARS     then do the move !
         lr    R6,R3             Adjust location in IN_AREA !

ENCODE$3       equ   *

         bal   R11,EXPAND$RTN

         sh    R4,=h'3'         Decrement length
         ah    R6,=h'3'         Increment IN_AREA pointer
         ah    R8,=h'4'         Increment OUT_AREA pointer
         st    R6,IN_POINTER    Remember for future reference
         l     R1,OUT_SIZE      Increment OUT_AREA counter -
         ah    R1,=h'4'          so that we can tell when it's time
         st    R1,OUT_SIZE        to do a WRITE - IF we haven't filled
         ch    R1,=h'76'           the OUT-AREA yet continue
         bl    ENCODE$LOOP      ELSE
*                                 We have >= 76 so it's time to
         bal   R11,WRITE$RTN       do the "WRITE thing" !

         b     ENCODE$LOOP

SAVEREMAINDER  mvc   SAVECHARS(0),0(R6)
RESTORECHARS   mvc   0(0,R3),SAVECHARS


*
*---------------------------------------------------------------------*
*------------> End of File - Deal with It -  <------------------------*
*------------> There may be unprocessed data <------------------------*
*------------> in IN_AREA - handle that 1st! <------------------------*
*---------------------------------------------------------------------*
*
*        The reason we are here is that we had less than 3 bytes
*        to encode (0, 1, or 2) so we tried READ$RTN but on the GET
*        we were sent to the EODAD which is NOMORE (see below) !
*        Now we have to work out if we have 0, 1, or 2 bytes left !
*
NOMORE   equ   *

         l     R6,IN_POINTER     R6 destroyed by READ$RTN - so restore!
         l     R4,REMAINDER      Retrieve REMAINING actual_length

         ch    R4,=h'0'          Have we got anything left ?
         be    GOT0MORE          If  0  we have none - so DONE!

         bal   R11,EXPAND$RTN    Expand what's left - either 1 or 2
         l     R1,OUT_SIZE      Increment OUT_AREA counter -
         ah    R1,=h'4'          so that we can tell when it's time
         st    R1,OUT_SIZE        to do a WRITE !

         ch    R4,=h'2'          What was left? Was it 2 bytes?
         be    GOT2MORE          YES - handle 8 bit short condition!
         b     GOT1MORE          NO - handle 16 bit short condition!

GOT2MORE equ   *
*                                Nullify low order 2 bits of 2nd last
         ni    2(R8),b'11111100'  byte, then put "=" sign in last
         mvi   3(R8),c'='          byte to tell decoder 8 bits short !
         bal   R11,WRITE$RTN     Do the "WRITE thing"  !!
         b     GOT0MORE

*
GOT1MORE equ   *
*                                Nullify low order 4 bits of 3rd last
         ni    1(R8),b'11110000'  byte, then put "==" signs in last 2
         mvc   2(2,R8),=cl2'=='    bytes to tell decode 16 bits short !
         bal   R11,WRITE$RTN     Do the "WRITE thing"  !!
         b     GOT0MORE

*
GOT0MORE equ   *

         l     R1,OUT_SIZE
         c     R1,=f'1'          Anything left to WRITE ?
         bl    CLOSE2            NO - close up shop and get out !
         mvc   OUT_SIZE,=f'76'   YES - Force full buffer and -
         bal   R11,WRITE$RTN      do the "WRITE thing" with WRITE$RTN !

CLOSE2   equ   *

         mvc   WTOMSG(26),=c'** Issuing CLOSEs       **'
         bal   R11,WTOPRTN

         CLOSE SYSUT2,MODE=31

         sr    R15,R15

CLOSE1   equ   *

         CLOSE SYSUT1,MODE=31

         l     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)

*
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*------------> End of Main-line Code <--------------------------------*
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*
*

EXPAND$RTN     equ   *   Expands 3 bytes to 4 bytes

         icm   R0,B'0111',0(R6)
         la    R5,4

EXPAND$LOOP    equ   *

         srdl  R0,6              Isolate 6 bits - then
         srl   R1,2               add 2 bits to make 8 - and
         bct   R5,EXPAND$LOOP      do this 3 more times !

         stcm  R1,B'1111',0(R8)

         br    R11

*
*

READ$RTN       equ   *   < 3 remaining to encode so it's time to READ!

         sr    R4,R4
         l     R6,=A(IN_AREA)
         l     R1,=A(SYSUT1)
         l     R0,=A(IN_AREA)
         GET   (1),(0)

         lh    R4,DCBLRECL      This is the "actual length" to encode!

         tm    DCBRECFM,DCBRECF Fixed or Variable?
         bor   R11              Fixed - continue! If variable don't
         sh    R4,=h'4'          translate the RDW - adjust length
         ah    R6,=h'4'            and start after the RDW !

         br    R11

*
*

WRITE$RTN      equ   *   We have >= 76 so it's time to do a WRITE !

         tr    OUT_AREA,SAFE64

         l     R1,=A(SYSUT2)
         l     R0,=A(OUT_AREA)
         PUT   (1),(0)
         mvi   OUT_AREA,c' '            Only clear out 1st 76 bytes -
         mvc   OUT_AREA+1(79),OUT_AREA   since there may be LEFT OVERS!
         la    R8,OUT_AREA              Reset output pointer.

         l     R1,OUT_SIZE
         sh    R1,=h'76'         We wrote out 76 bytes -
         st    R1,OUT_SIZE        save current OUT_AREA size -
         ch    R1,=h'1'            check to see if there's some left?
         blr   R11               NO - none left so continue
         sh    R1,=h'1'          YES - some left - so move to front -
         ex    R1,SHIFTLEFTOVERS     - after calculating m/c length!

         br    R11

SHIFTLEFTOVERS mvc   OUT_AREA(0),OUT_AREA+76

*
*
WTOPRTN   equ   *
          la    R10,WTOLIST
          WTO   MF=(E,(R10))
          mvi   WTOMSG,C' '
          mvc   WTOMSG+1(L'WTOMSG-1),WTOMSG
          br    R11

WTOLIST  WTO '                                                         X
                              ',                                       X
               ROUTCDE=11,DESC=7,MF=L
WTOMSG    equ   WTOLIST+4,70

*---------------------------------------------------------------------*
*---------------------------------------------------------------------*


DWORD          dc    d'0'
WORD           dc    f'0'
ACTUAL_LENGTH  dc    f'0'
REMAINDER      dc    f'0'
IN_POINTER     dc    a(0)
OUT_SIZE       dc    f'0'


SAFE64   dc    256xl1'40' - space
         org   SAFE64
         dc    c'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         dc    c'abcdefghijklmnopqrstuvwxyz'
         dc    c'0123456789+/'
         org   SAFE64+c'='
         dc    c'='
         org

         ltorg

SAVECHARS  dc  cl3' '   <<<<<<- for remaining data from last read -
         dc    cl3' '   <<<<<<- for remaining data from last read -
IN_AREA  ds    0cl1028          when 1 or 2 bytes not processed -
         dc    1028cl1' '       moved to front - handled by ENCODE$LOOP

OUT_AREA ds    0cl80   <<<<<- RFC1521 says to only use 76 bytes !
         dc    76cl1' '
         dc    cl4' '    <<<<<<- for "overflow" - goes to start of next
*                                OUT_AREA - handled by WRITE$RTN

SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=NOMORE

SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80,RECFM=FB

         DCBD  DSORG=(PS),DEVD=DA

         end   TOBASE64
